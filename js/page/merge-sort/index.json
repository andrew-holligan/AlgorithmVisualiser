{
    "Default": 
    {
        "description":[
            "This algorithm works by recursively splitting the array in half until we reach sub arrays of only size 1.",
            "Then merge these sub arrays in a sorted manner.",
            "Keep merging the sub arrays in a sorted manner until we have a single sorted array."
        ],
        "complexity":{
            "best-case":"O(nlogn)",
            "worst-case":"O(nlogn)",
            "average-case":"O(nlogn)",
            "space":"O(n)"
        },
        "implementation": {
            "javascript":[      
                "function merge(arr, l, m, r) {",
                "",
                "  let n1 = m - l + 1;",
                "  let n2 = r - m;",
                "",
                "  let L = new Array(n1 + 1);",
                "  let R = new Array(n2 + 1);",
                "",
                "  for (let i = l; i <= m; i++) {",
                "    L[i - l] = arr[i];",
                "  }",
                "",
                "  for (let i = m + 1; i <= r; i++) {",
                "    R[i - (m + 1)] = arr[i];",
                "  }",
                "",
                "  L[n1] = Infinity;",
                "  R[n2] = Infinity;",
                "",
                "  let i = 0;",
                "  let j = 0;",
                "",
                "  for (let k = l; k <= r; k++) {",
                "    if (L[i] < R[j]) {",
                "      arr[k] = L[i];",
                "      i++;",
                "    } else {",
                "      arr[k] = R[j];",
                "      j++;",
                "    }",
                "  }",
                "",
                "}",
                "",
                "",
                "function mergeSort(arr, l, r) {",
                "",
                "  if (l < r) {",
                "    let m = Math.floor((l + r) / 2);",
                "    mergeSort(arr, l, m);",
                "    mergeSort(arr, m + 1, r);",
                "    merge(arr, l, m, r);",
                "  }",
                "",
                "}"
            ],
            "java":[
                "public void merge(int[] arr, int l, int m, int r) {",
                "",
                "  int n1 = m - l + 1;",
                "  int n2 = r - m;",
                "",
                "  int[] L = new int[n1 + 1];",
                "  int[] R = new int[n2 + 1];",
                "",
                "  for (int i = l; i <= m; i++) {",
                "    L[i - l] = arr[i];",
                "  }",
                "",
                "  for (int i = m + 1; i <= r; i++) {",
                "    R[i - (m + 1)] = arr[i];",
                "  }",
                "",
                "  L[n1] = Integer.MAX_VALUE;",
                "  R[n2] = Integer.MAX_VALUE;",
                "",
                "  int i = 0;",
                "  int j = 0;",
                "",
                "  for (int k = l; k <= r; k++) {",
                "    if (L[i] < R[j]) {",
                "      arr[k] = L[i];",
                "      i++;",
                "    } else {",
                "      arr[k] = R[j];",
                "      j++;",
                "    }",
                "  }",
                "",
                "}",
                "",
                "",
                "public void mergeSort(arr, l, r) {",
                "",
                "  if (l < r) {",
                "    let m = Math.floor((l + r) / 2);",
                "    mergeSort(arr, l, m);",
                "    mergeSort(arr, m + 1, r);",
                "    merge(arr, l, m, r);",
                "  }",
                "",
                "}"
            ],
            "python":[
                "def merge(arr, l, m, r):",
                "",
                "  n1 = m - l + 1",
                "  n2 = r - m",
                "",
                "  L = [None] * (n1 + 1)",
                "  R = [None] * (n2 + 1)",
                "",
                "  for i in range(l, m+1):",
                "    L[i - l] = arr[i]",
                "",
                "  for i in range(m+1, r+1):",
                "    R[i - (m + 1)] = arr[i]",
                "",
                "  L[n1] = sys.maxsize",
                "  R[n2] = sys.maxsize",
                "",
                "  i = 0",
                "  j = 0",
                "",
                "  for k in range(l, r+1):",
                "    if L[i] < R[j]:",
                "      arr[k] = L[i]",
                "      i += 1",
                "    else:",
                "      arr[k] = R[j]",
                "      j += 1",
                "",
                "",
                "def mergeSort(arr, l, r):",
                "",
                "  if l < r:",
                "    m = min((l + r) / 2)",
                "    mergeSort(arr, l, m)",
                "    mergeSort(arr, m + 1, r)",
                "    merge(arr, l, m, r)"
            ],
            "cpp":[
                "STILL TO IMPLEMENT"
            ],
            "csharp":[
                "STILL TO IMPLEMENT"
            ],
            "c":[
                "STILL TO IMPLEMENT"
            ]
        }
    },

    "BottomUp": 
    {
        "description":[
            "Instead of starting with the main array and splitting all the way down then merging (top-down).",
            "We instead start with sub arrays of size 1 and merge them together to form larger sub arrays. (bottom-up)",
            "We do this approach iteravely instead of recursively."
        ],
        "complexity":{
            "best-case":"O(nlogn)",
            "worst-case":"O(nlogn)",
            "average-case":"O(nlogn)",
            "space":"O(n)"
        },
        "implementation": {
            "javascript":[
                "function merge(arr, l, m, r) {",
                "",
                "  let n1 = m - l + 1;",
                "  let n2 = r - m;",
                "",
                "  let L = new Array(n1 + 1);",
                "  let R = new Array(n2 + 1);",
                "",
                "  for (let i = l; i <= m; i++) {",
                "    L[i - l] = arr[i];",
                "  }",
                "",
                "  for (let i = m + 1; i <= r; i++) {",
                "    R[i - (m + 1)] = arr[i];",
                "  }",
                "",
                "  L[n1] = Infinity;",
                "  R[n2] = Infinity;",
                "",
                "  let i = 0;",
                "  let j = 0;",
                "",
                "  for (let k = l; k <= r; k++) {",
                "    if (L[i] < R[j]) {",
                "      arr[k] = L[i];",
                "      i++;",
                "    } else {",
                "      arr[k] = R[j];",
                "      j++;",
                "    }",
                "  }",
                "",
                "}",
                "",
                "",
                "function mergeSort(arr) {",
                "",
                "  let width = 1;",
                "  let n = arr.length;",
                "",
                "  while (width < n) {",
                "    let l = 0;",
                "    while (l < n) {",
                "      let r = Math.min(l + (width * 2 - 1), n - 1);",
                "      let m = Math.min(l + width - 1, n - 1);",
                "      merge(arr, l, m, r);",
                "",
                "      l += width * 2;",
                "    }",
                "    width *= 2;",
                "  }",
                "",
                "}"
            ],
            "java":[
                "public void merge(int[] arr, int l, int m, int r) {",
                "",
                "  int n1 = m - l + 1;",
                "  int n2 = r - m;",
                "",
                "  int[] L = new int[n1 + 1];",
                "  int[] R = new int[n2 + 1];",
                "",
                "  for (int i = l; i <= m; i++) {",
                "    L[i - l] = arr[i];",
                "  }",
                "",
                "  for (int i = m + 1; i <= r; i++) {",
                "    R[i - (m + 1)] = arr[i];",
                "  }",
                "",
                "  L[n1] = Integer.MAX_VALUE;",
                "  R[n2] = Integer.MAX_VALUE;",
                "",
                "  int i = 0;",
                "  int j = 0;",
                "",
                "  for (int k = l; k <= r; k++) {",
                "    if (L[i] < R[j]) {",
                "      arr[k] = L[i];",
                "      i++;",
                "    } else {",
                "      arr[k] = R[j];",
                "      j++;",
                "    }",
                "  }",
                "",
                "}",
                "",
                "",
                "public void mergeSort(int[] arr) {",
                "",
                "  int width = 1;",
                "  int n = arr.length;",
                "",
                "  while (width < n) {",
                "    int l = 0;",
                "    while (l < n) {",
                "      int r = Math.min(l + (width * 2 - 1), n - 1);",
                "      int m = Math.min(l + width - 1, n - 1);",
                "      merge(arr, l, m, r);",
                "",
                "      l += width * 2;",
                "    }",
                "    width *= 2;",
                "  }",
                "",
                "}"
            ],
            "python":[
                "def merge(arr, l, m, r):",
                "",
                "  n1 = m - l + 1",
                "  n2 = r - m",
                "",
                "  L = [None] * (n1 + 1)",
                "  R = [None] * (n2 + 1)",
                "",
                "  for i in range(l, m+1):",
                "    L[i - l] = arr[i]",
                "",
                "  for i in range(m+1, r+1):",
                "    R[i - (m + 1)] = arr[i]",
                "",
                "  L[n1] = sys.maxsize",
                "  R[n2] = sys.maxsize",
                "",
                "  i = 0",
                "  j = 0",
                "",
                "  for k in range(l, r+1):",
                "    if L[i] < R[j]:",
                "      arr[k] = L[i]",
                "      i += 1",
                "    else:",
                "      arr[k] = R[j]",
                "      j += 1",
                "",
                "",
                "def mergeSort(arr):",
                "",
                "  width = 1",
                "  n = len(arr)",
                "",
                "  while width < n:",
                "    l = 0",
                "    while l < n:",
                "      r = min(l + (width * 2 - 1), n - 1)",
                "      m = min(l + width - 1, n - 1)",
                "      merge(arr, l, m, r)",
                "",
                "      l += width * 2",
                "",
                "    width *= 2"
            ],
            "cpp":[
                "STILL TO IMPLEMENT"
            ],
            "csharp":[
                "STILL TO IMPLEMENT"
            ],
            "c":[
                "STILL TO IMPLEMENT"
            ]
        }
    }
}