{
    "MaxHeap": 
    {
        "description":[
            "This algorithm is similar to Selection Sort. It splits the array into a sorted and unsorted region.",
            "It will iterate through the unsorted region and move the max element to the sorted region.",
            "However, it uses the 'max-heap' data structure to do this."
        ],
        "complexity":{
            "best-case":"O(nlogn)",
            "worst-case":"O(nlogn)",
            "average-case":"O(nlogn)",
            "space":"O(1)"
        },
        "implementation": {
            "javascript":[
                "function maxHeapify(arr, i, n) {",
                "",
                "  let l = 2 * i + 1;",
                "  let r = 2 * i + 2;",
                "  let largest;",
                "",
                "  if (l < n && arr[l] > arr[i]) {",
                "    largest = l;",
                "  } else {",
                "    largest = i;",
                "  }",
                "",
                "  if (r < n && arr[r] > arr[largest]) {",
                "    largest = r;",
                "  }",
                "",
                "  if (largest !== i) {",
                "    [arr[i], arr[largest]] = [arr[largest], arr[i]];",
                "    maxHeapify(arr, largest, n);",
                "  }",
                "",
                "}",
                "",
                "",
                "function buildMaxHeap(arr) {",
                "",
                "  for (let i = Math.floor(arr.length / 2); i >= 0; i--) {",
                "    maxHeapify(arr, i, arr.length);",
                "  }",
                "",
                "}",
                "",
                "",
                "function maxHeapSort(arr) {",
                "",
                "  buildMaxHeap(arr);",
                "",
                "  let s = arr.length;",
                "  for (let i = arr.length - 1; i >= 0; i--) {",
                "    [arr[0], arr[i]] = [arr[i], arr[0]];",
                "    s--;",
                "    maxHeapify(arr, 0, s);",
                "  }",
                "",
                "  return arr;",
                "",
                "}"
            ],
            "java":[
                "public void maxHeapify(int[] arr, int i, int n) {",
                "",
                "  int l = 2 * i + 1;",
                "  int r = 2 * i + 2;",
                "  int largest;",
                "",
                "  if (l < n && arr[l] > arr[i]) {",
                "    largest = l;",
                "  } else {",
                "    largest = i;",
                "  }",
                "",
                "  if (r < n && arr[r] > arr[largest]) {",
                "    largest = r;",
                "  }",
                "",
                "  if (largest != i) {",
                "    int temp = arr[i];",
                "    arr[i] = arr[largest];",
                "    arr[largest] = temp;",
                "    maxHeapify(arr, largest, n);",
                "  }",
                "",
                "}",
                "",
                "",
                "public void buildMaxHeap(int[] arr) {",
                "",
                "  for (int i = arr.length / 2; i >= 0; i--) {",
                "    maxHeapify(arr, i, arr.length);",
                "  }",
                "",
                "}",
                "",
                "",
                "public int[] maxHeapSort(arr) {",
                "",
                "  buildMaxHeap(arr);",
                "",
                "  int s = arr.length;",
                "  for (int i = arr.length - 1; i >= 0; i--) {",
                "    int temp = arr[0];",
                "    arr[0] = arr[i];",
                "    arr[i] = temp;",
                "    s--;",
                "    maxHeapify(arr, 0, s);",
                "  }",
                "",
                "  return arr;",
                "",
                "}"
            ],
            "python":[
                "def maxHeapify(arr, i, n):",
                "",
                "  l = 2 * i + 1",
                "  r = 2 * i + 2",
                "",
                "  if l < n and arr[l] > arr[i]:",
                "    largest = l",
                "  else:",
                "    largest = i",
                "",
                "  if r < n and arr[r] > arr[largest]:",
                "    largest = r",
                "",
                "  if largest != i:",
                "    arr[i], arr[largest] = arr[largest], arr[i]",
                "    maxHeapify(arr, largest, n)",
                "",
                "",
                "def buildMaxHeap(arr):",
                "",
                "  for i in range(len(arr) // 2, -1, -1):",
                "    maxHeapify(arr, i, len(arr))",
                "",
                "",
                "def maxHeapSort(arr):",
                "",
                "  buildMaxHeap(arr)",
                "",
                "  s = len(arr)",
                "  for i in range(len(arr) - 1, -1, -1):",
                "    arr[0], arr[i] = arr[i], arr[0]",
                "    s--",
                "    maxHeapify(arr, 0, s)",
                "",
                "  return arr"
            ],
            "cpp":[
                "STILL TO IMPLEMENT"
            ],
            "csharp":[
                "STILL TO IMPLEMENT"
            ],
            "c":[
                "STILL TO IMPLEMENT"
            ]
        }
    },

    "MinHeap": 
    {
        "description":[
            "This is the descending version of the MaxHeap algorithm.",
            "It is very similar except it uses a 'min-heap' data structure instead.",
            "It will iterate through the unsorted region and move the min element to the sorted region."
        ],
        "complexity":{
            "best-case":"O(nlogn)",
            "worst-case":"O(nlogn)",
            "average-case":"O(nlogn)",
            "space":"O(1)"
        },
        "implementation": {
            "javascript":[
                "function minHeapify(arr, i, n) {",
                "",
                "  let l = 2 * i + 1;",
                "  let r = 2 * i + 2;",
                "  let smallest;",
                "",
                "  if (l < n && arr[l] < arr[i]) {",
                "    smallest = l;",
                "  } else {",
                "    smallest = i;",
                "  }",
                "",
                "  if (r < n && arr[r] < arr[largest]) {",
                "    smallest = r;",
                "  }",
                "",
                "  if (smallest !== i) {",
                "    [arr[i], arr[smallest]] = [arr[smallest], arr[i]];",
                "    minHeapify(arr, smallest, n);",
                "  }",
                "",
                "}",
                "",
                "",
                "function buildMinHeap(arr) {",
                "",
                "  for (let i = Math.floor(arr.length / 2); i >= 0; i--) {",
                "    minHeapify(arr, i, arr.length);",
                "  }",
                "",
                "}",
                "",
                "",
                "function minHeapSort(arr) {",
                "",
                "  buildMinHeap(arr);",
                "",
                "  let s = arr.length;",
                "  for (let i = arr.length - 1; i >= 0; i--) {",
                "    [arr[0], arr[i]] = [arr[i], arr[0]];",
                "    s--;",
                "    minHeapify(arr, 0, s);",
                "  }",
                "",
                "  return arr;",
                "",
                "}"
            ],
            "java":[
                "public void minHeapify(int[] arr, int i, int n) {",
                "",
                "  int l = 2 * i + 1;",
                "  int r = 2 * i + 2;",
                "  int smallest;",
                "",
                "  if (l < n && arr[l] < arr[i]) {",
                "    smallest = l;",
                "  } else {",
                "    smallest = i;",
                "  }",
                "",
                "  if (r < n && arr[r] < arr[smallest]) {",
                "    smallest = r;",
                "  }",
                "",
                "  if (smallest != i) {",
                "    int temp = arr[i];",
                "    arr[i] = arr[smallest];",
                "    arr[smallest] = temp;",
                "    maxHeapify(arr, smallest, n);",
                "  }",
                "",
                "}",
                "",
                "",
                "public void buildMinHeap(int[] arr) {",
                "",
                "  for (int i = arr.length / 2; i >= 0; i--) {",
                "    minHeapify(arr, i, arr.length);",
                "  }",
                "",
                "}",
                "",
                "",
                "public int[] minHeapSort(arr) {",
                "",
                "  buildMinHeap(arr);",
                "",
                "  int s = arr.length;",
                "  for (int i = arr.length - 1; i >= 0; i--) {",
                "    int temp = arr[0];",
                "    arr[0] = arr[i];",
                "    arr[i] = temp;",
                "    s--;",
                "    minHeapify(arr, 0, s);",
                "  }",
                "",
                "  return arr;",
                "",
                "}"
            ],
            "python":[
                "def minHeapify(arr, i, n):",
                "",
                "  l = 2 * i + 1",
                "  r = 2 * i + 2",
                "",
                "  if l < n and arr[l] < arr[i]:",
                "    smallest = l",
                "  else:",
                "    smallest = i",
                "",
                "  if r < n and arr[r] < arr[smallest]:",
                "    smallest = r",
                "",
                "  if smallest != i:",
                "    arr[i], arr[smallest] = arr[smallest], arr[i]",
                "    maxHeapify(arr, smallest, n)",
                "",
                "",
                "def buildMinHeap(arr):",
                "",
                "  for i in range(len(arr) // 2, -1, -1):",
                "    minHeapify(arr, i, len(arr))",
                "",
                "",
                "def minHeapSort(arr):",
                "",
                "  buildMinHeap(arr)",
                "",
                "  s = len(arr)",
                "  for i in range(len(arr) - 1, -1, -1):",
                "    arr[0], arr[i] = arr[i], arr[0]",
                "    s--",
                "    minHeapify(arr, 0, s)",
                "",
                "  return arr"
            ],
            "cpp":[
                "STILL TO IMPLEMENT"
            ],
            "csharp":[
                "STILL TO IMPLEMENT"
            ],
            "c":[
                "STILL TO IMPLEMENT"
            ]
        }
    }
}