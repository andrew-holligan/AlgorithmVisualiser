{
    "Default": 
    {
        "description":[
            "This algorithm works similar to Bubble Sort except it continually shifts smallest elements to the left.",
            "It will start at the second element and compare to the element to the left of it.",
            "It will keep shifting this element down to the left until its met with a smaller element to the left.",
            "It will do this for every element in the array."
        ],
        "complexity":{
            "best-case":"O(n)",
            "worst-case":"O(n^2)",
            "average-case":"O(n^2)",
            "space":"O(1)"
        },
        "implementation": {
            "javascript":[
                "function insertionSort(arr) {",
                "",
                "  for (let j = 1; j <= arr.length - 1; j++) {",
                "",
                "    let key = arr[j];",
                "    let i = j - 1;",
                "",
                "    while (i >= 0 && arr[i] > key) {",
                "      arr[i + 1] = arr[i];",
                "      i = i - 1;",
                "    }",
                "",
                "    arr[i + 1] = key;",
                "",
                "  }",
                "",
                "  return arr",
                "",
                "}"
            ],
            "java":[
                "public int[] insertionSort(int[] arr) {",
                "",
                "  for (int j = 1; j <= arr.length - 1; j++) {",
                "",
                "    int key = arr[j];",
                "    int i = j - 1;",
                "",
                "    while (i >= 0 && arr[i] > key) {",
                "      arr[i + 1] = arr[i];",
                "      i = i - 1;",
                "    }",
                "",
                "    arr[i + 1] = key;",
                "",
                "  }",
                "",
                "  return arr",
                "",
                "}"
            ],
            "python":[
                "def insertionSort(arr):",
                "",
                "  for j in range(1, len(arr)):",
                "",
                "    key = arr[j]",
                "    i = j - 1",
                "",
                "    while (i >= 0 and arr[i] > key):",
                "      arr[i + 1] = arr[i]",
                "      i = i - 1",
                "",
                "    arr[i + 1] = key",
                "",
                "  return arr"
            ],
            "cpp":[
                "STILL TO IMPLEMENT"
            ],
            "csharp":[
                "STILL TO IMPLEMENT"
            ],
            "c":[
                "STILL TO IMPLEMENT"
            ]
        }
    }
}